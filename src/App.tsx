import { useState, useCallback, useMemo, useEffect, useRef } from 'react';
import SearchBar from './components/SearchBar';
import ProfileCard from './components/ProfileCard';
import ProfileSkeleton from './components/ProfileSkeleton';
import ErrorBoundary from './components/ErrorBoundary';
import { GitHubProfile } from './types';
import { fetchGitHubProfile } from './services/github';
import { CacheService } from './services/cache';
import ShareImage from './components/ShareImage';

function App() {
  const [profile, setProfile] = useState<GitHubProfile | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [shareImage, setShareImage] = useState<string | null>(null);
  const [isGeneratingImage, setIsGeneratingImage] = useState(false);
  const [shareError, setShareError] = useState<string | null>(null);
  const [isSharing, setIsSharing] = useState(false);
  const [isDarkMode, setIsDarkMode] = useState(true);
  const searchInputRef = useRef<HTMLInputElement>(null);

  const handleSearch = async (username: string) => {
    setLoading(true);
    setError(null);
    try {
      const data = await fetchGitHubProfile(username);
      setProfile(data);
      
      // Add to recent searches
      const recentSearches = JSON.parse(localStorage.getItem('recent_searches') || '[]');
      if (!recentSearches.includes(username)) {
        recentSearches.unshift(username);
        localStorage.setItem('recent_searches', JSON.stringify(recentSearches.slice(0, 5)));
      }
    } catch (error) {
      setError('Failed to fetch profile. Are you sure this GitHub user exists? ü§î');
      setProfile(null);
    } finally {
      setLoading(false);
    }
  };

  const clearCache = useCallback(() => {
    CacheService.clear();
    alert('Cache cleared! üßπ');
  }, []);

  const handleDownload = async () => {
    if (!profile || !shareImage) return;

    try {
      setIsSharing(true);
      setShareError(null);

      const downloadLink = document.createElement('a');
      downloadLink.href = shareImage;
      downloadLink.download = `${profile.username}-github-roast.png`;
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);

      // Show success message
      alert('Image downloaded successfully! üéâ');
      
    } catch (error) {
      console.error('Error downloading:', error);
      setShareError('Failed to download image. Please try again.');
    } finally {
      setIsSharing(false);
    }
  };

  const handleShareSocial = async () => {
    if (!profile || !shareImage) return;

    try {
      setIsSharing(true);
      setShareError(null);

      const blob = await fetch(shareImage).then(r => r.blob());
      const file = new File([blob], `${profile.username}-github-roast.png`, { type: 'image/png' });
      
      const shareData = {
        title: 'GitHub Profile Roast',
        text: `üî• Check out my GitHub profile roast!\nScore: ${profile.evaluationResults.overallScore}/100\n\nGenerated by GitHub Profile Roaster`,
        url: window.location.origin,
        files: [file]
      };

      if (navigator.share && navigator.canShare(shareData)) {
        await navigator.share(shareData);
      } else {
        throw new Error('Social sharing not supported on this device');
      }
    } catch (error) {
      console.error('Error sharing:', error);
      setShareError(
        error instanceof Error 
          ? error.message 
          : 'Failed to share. Try downloading instead.'
      );
    } finally {
      setIsSharing(false);
    }
  };

  const handleImageGenerate = useCallback((dataUrl: string) => {
    setShareImage(dataUrl);
    setShareError(null);
  }, []);

  const handleGenerateStart = useCallback(() => {
    setIsGeneratingImage(true);
    setShareError(null);
  }, []);

  const handleGenerateEnd = useCallback(() => {
    setIsGeneratingImage(false);
  }, []);

  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.key === '/' && (e.metaKey || e.ctrlKey)) {
        // Focus search
        searchInputRef.current?.focus();
      }
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, []);

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white">
        <div className="container mx-auto px-4 py-8">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-4xl font-bold text-center flex-1">
              GitHub Profile Roaster üî•
            </h1>
            <button
              onClick={clearCache}
              className="px-3 py-1 bg-gray-700 rounded-md hover:bg-gray-600 transition-colors text-sm"
            >
              Clear Cache üßπ
            </button>
          </div>

          <div className="max-w-md mx-auto">
            <SearchBar onSearch={handleSearch} ref={searchInputRef} />
            
            {profile && (
              <div className="mt-4 flex gap-2 justify-center">
                <button
                  onClick={handleDownload}
                  disabled={!shareImage || isGeneratingImage || isSharing}
                  className="px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition-colors disabled:opacity-50"
                >
                  {isGeneratingImage ? (
                    'Generating... ‚è≥'
                  ) : (
                    'Download üíæ'
                  )}
                </button>

                {typeof navigator.share === 'function' && (
                  <button
                    onClick={handleShareSocial}
                    disabled={!shareImage || isGeneratingImage || isSharing}
                    className="px-4 py-2 bg-purple-500 rounded-md hover:bg-purple-600 transition-colors disabled:opacity-50"
                  >
                    {isSharing ? 'Sharing... üîÑ' : 'Share üì±'}
                  </button>
                )}
              </div>
            )}

            {shareError && (
              <div className="mt-2 text-center text-red-400 text-sm">
                {shareError}
              </div>
            )}
          </div>

          {/* Recent Searches */}
          <div className="mt-4 flex gap-2 justify-center flex-wrap">
            {JSON.parse(localStorage.getItem('recent_searches') || '[]').map((search: string) => (
              <button
                key={search}
                onClick={() => handleSearch(search)}
                className="px-2 py-1 bg-gray-700 rounded-md hover:bg-gray-600 transition-colors text-sm"
              >
                {search}
              </button>
            ))}
          </div>

          {error && (
            <div className="mt-8 text-center text-red-400 bg-red-900/20 p-4 rounded-lg">
              {error}
            </div>
          )}
          
          {loading && <ProfileSkeleton />}

          {profile && (
            <>
              <ProfileCard profile={profile} />
              
              {/* Development Preview */}
              {process.env.NODE_ENV === 'development' && (
                <div className="mt-8">
                  <h3 className="text-xl font-semibold mb-4">Share Image Preview (Development Only)</h3>
                  <div className="relative bg-gray-800 p-4 rounded-lg overflow-hidden">
                    <div className="absolute inset-0 bg-grid-pattern opacity-5" />
                    <div className="relative">
                      {shareImage ? (
                        <div className="max-w-full overflow-auto">
                          <img 
                            src={shareImage} 
                            alt="Share Preview" 
                            className="w-full h-auto rounded-lg shadow-lg"
                            style={{ 
                              maxWidth: '1080px',
                              margin: '0 auto',
                              aspectRatio: '1 / 1'
                            }}
                          />
                        </div>
                      ) : (
                        <div className="h-40 flex items-center justify-center text-gray-400">
                          Generating preview...
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {/* Keep the ShareImage component for generation */}
              <div className="absolute left-[-9999px]">
                <ShareImage 
                  profile={profile} 
                  onGenerate={handleImageGenerate}
                  onGenerateStart={handleGenerateStart}
                  onGenerateEnd={handleGenerateEnd}
                />
              </div>
            </>
          )}
        </div>
      </div>
    </ErrorBoundary>
  );
}

export default App; 